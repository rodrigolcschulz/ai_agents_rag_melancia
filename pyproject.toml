[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "melancia-ai-rag"
version = "1.0.0"
description = "AI RAG Agent for Retail Media and E-commerce - MelÃ¢ncIA"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Conecta Ads", email = "contato@conectaads.com.br"}
]
maintainers = [
    {name = "Conecta Ads", email = "contato@conectaads.com.br"}
]
keywords = ["ai", "rag", "retail-media", "e-commerce", "langchain", "openai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "accelerate==1.7.0",
    "anthropic==0.51.0",
    "bitsandbytes==0.45.5",
    "brotli==1.1.0",
    "cached-property==1.5.2",
    "chroma-hnswlib==0.7.6",
    "datasets==3.6.0",
    "email-validator==2.2.0",
    "exceptiongroup==1.3.0",
    "faiss==1.9.0",
    "faiss-cpu==1.11.0",
    "fastapi-cli==0.0.7",
    "feedparser==6.0.11",
    "fqdn==1.5.1",
    "gensim==4.3.3",
    "google-generativeai==0.8.5",
    "gradio==5.29.1",
    "grpcio-status==1.71.0",
    "httptools==0.6.4",
    "ipywidgets==8.1.7",
    "isoduration==20.11.0",
    "jaraco.collections==5.1.0",
    "jupyter-dash==0.4.2",
    "jupyterlab==4.4.2",
    "langchain-chroma==0.2.4",
    "langchain-community==0.3.25",
    "langchain-openai==0.3.23",
    "matplotlib==3.10.3",
    "modal==0.77.0",
    "monotonic==1.6",
    "munkres==1.1.4",
    "ollama==0.4.8",
    "optree==0.15.0",
    "pickleshare==0.7.5",
    "pip-chill==1.0.3",
    "pkgutil-resolve-name==1.3.10",
    "pulsar-client==3.7.0",
    "pybind11==2.13.6",
    "pybind11-global==2.13.6",
    "pyopenssl==25.0.0",
    "pyside6==6.9.0",
    "pysocks==1.7.1",
    "pyu2f==0.1.5",
    "sentence-transformers==4.1.0",
    "sentencepiece==0.2.0",
    "shiboken6==6.9.0",
    "speedtest-cli==2.1.3",
    "tinycss2==1.4.0",
    "tomli==2.2.1",
    "twilio==9.6.1",
    "typer-slim==0.15.4",
    "typing-utils==0.1.0",
    "unicodedata2==16.0.0",
    "unidecode==1.4.0",
    "uri-template==1.3.0",
    "webcolors==24.11.1",
    "win-inet-pton==1.1.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "pandas>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/conectaads/melancia-ai-rag"
Repository = "https://github.com/conectaads/melancia-ai-rag"
Documentation = "https://melancia-ai-rag.readthedocs.io"
"Bug Tracker" = "https://github.com/conectaads/melancia-ai-rag/issues"

[project.scripts]
melancia = "agent.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["agent*", "etl_and_scrapping*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg-info",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
